package br.com.op;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller    // This means that this class is a Controller
@CrossOrigin(origins = "http://localhost:9000")
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	
	@GetMapping(path="{id}")
	public ResponseEntity<User> getOne(@PathVariable Integer id){
		
		User user = userRepository.findOne(id);
		if(user == null){
			return ResponseEntity.notFound().build();
		}
		
		return new ResponseEntity<User>(user, HttpStatus.FOUND);
	}
	
	@DeleteMapping(path="/{id}")
	public ResponseEntity<?> removeUser(@PathVariable("id")  Integer id){
		userRepository.delete(id);
		return ResponseEntity.status(HttpStatus.MOVED_PERMANENTLY).build();
	}
	
	@PostMapping() // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestBody User user ) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		userRepository.save(user);
		return "Saved";
	}

	@PutMapping(path="/{id}")
	public ResponseEntity<User> update(@PathVariable("id") Integer id, @RequestBody User user){
		userRepository.save(user);
		return new ResponseEntity<User>(user, HttpStatus.ACCEPTED);
	}
	
	
	@GetMapping()
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}